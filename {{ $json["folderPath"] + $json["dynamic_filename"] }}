```python
# /emr_backend/.env
# This file should be secured and not committed to version control.
# Use a key generation tool for production-grade secrets.
# Example: openssl rand -hex 32
SECRET_KEY="09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=30
# Example for asynchronous PostgreSQL driver asyncpg
DATABASE_URL="postgresql+asyncpg://emr_user:strong_password@localhost:5432/emr_db"

# /emr_backend/config.py
import pydantic_settings

class Settings(pydantic_settings.BaseSettings):
    """
    Manages application configuration using environment variables.
    """
    SECRET_KEY: str
    ALGORITHM: str
    ACCESS_TOKEN_EXPIRE_MINUTES: int
    DATABASE_URL: str

    class Config:
        env_file = ".env"

settings = Settings()


# /emr_backend/database.py
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from config import settings

# It is assumed the PostgreSQL server is configured for encryption at rest.
# The `ssl` parameter can be used here for explicit TLS enforcement in transit.
# Example: connect_args={"ssl": "require"}
engine = create_async_engine(settings.DATABASE_URL, echo=False)

AsyncSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

Base = declarative_base()

async def get_db() -> AsyncSession:
    """
    FastAPI dependency to provide a database session.
    Ensures the session is always closed after the request.
    """
    async with AsyncSessionLocal() as session:
        yield session


# /emr_backend/models.py
import uuid
from sqlalchemy import (
    Column, String, DateTime, ForeignKey, Text, JSON,
    Enum as SQLAlchemyEnum
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from enum import Enum
from database import Base

class UserRole(str, Enum):
    CLINICIAN = "clinician"
    ADMIN = "admin"
    PATIENT = "patient"
    SYSTEM = "system"

class AllergySeverity(str, Enum):
    MILD = "mild"
    MODERATE = "moderate"
    SEVERE = "severe"
    LIFE_THREATENING = "life_threatening"

class AuditAction(str, Enum):
    CREATE = "CREATE"
    READ = "READ"
    UPDATE = "UPDATE"
    DELETE = "DELETE"
    LOGIN_SUCCESS = "LOGIN_SUCCESS"
    LOGIN_FAIL = "LOGIN_FAIL"
    ACCESS_DENIED = "ACCESS_DENIED"

class User(Base):
    __tablename__ = "users"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    full_name = Column(String, nullable=False)
    role = Column(SQLAlchemyEnum(UserRole), nullable=False)
    is_active = Column(DateTime(timezone=True), default=func.now()) # Datetime indicates active status, NULL indicates inactive
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

class Patient(Base):
    __tablename__ = "patients"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    # MRN: Medical Record Number
    mrn = Column(String, unique=True, index=True, nullable=False)
    full_name = Column(String, nullable=False)
    date_of_birth = Column(DateTime(timezone=True), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    allergies = relationship("Allergy", back_populates="patient", cascade="all, delete-orphan")

class Allergy(Base):
    __tablename__ = "allergies"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    patient_id = Column(UUID(as_uuid=True), ForeignKey("patients.id"), nullable=False, index=True)
    substance = Column(String, nullable=False)
    reaction = Column(Text, nullable=False)
    severity = Column(SQLAlchemyEnum(AllergySeverity), nullable=False)
    recorder_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False)
    is_active = Column(DateTime(timezone=True), default=func.now()) # Datetime indicates active, NULL indicates inactive/resolved
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    patient = relationship("Patient", back_populates="allergies")
    recorder = relationship("User")

class AuditLog(Base):
    __tablename__ = "audit_logs"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), index=True)
    patient_context_id = Column(UUID(as_uuid=True), ForeignKey("patients.id"), index=True, nullable=True)
    action = Column(SQLAlchemyEnum(AuditAction), nullable=False)
    details = Column(JSON, nullable=True) # For storing non-PHI context
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    ip_address = Column(String)


# /emr_backend/schemas.py
from pydantic import BaseModel, Field
from typing import Optional, List
from uuid import UUID
from datetime import datetime
from models import AllergySeverity, UserRole

# Base schemas
class AllergyBase(BaseModel):
    substance: str = Field(..., max_length=255, description="The substance the patient is allergic to.")
    reaction: str = Field(..., description="Description of the allergic reaction.")
    severity: AllergySeverity

class UserBase(BaseModel):
    username: str = Field(..., max_length=100)
    full_name: str = Field(..., max_length=255)
    role: UserRole

# Schemas for creating data
class AllergyCreate(AllergyBase):
    pass

class UserCreate(UserBase):
    password: str

# Schemas for updating data
class AllergyUpdate(BaseModel):
    substance: Optional[str] = Field(None, max_length=255)
    reaction: Optional[str] = None
    severity: Optional[AllergySeverity] = None

# Schemas for API responses (includes DB fields)
class UserResponse(UserBase):
    id: UUID
    is_active: Optional[datetime]
    
    class Config:
        from_attributes = True

class AllergyResponse(AllergyBase):
    id: UUID
    patient_id: UUID
    recorder_id: UUID
    is_active: Optional[datetime]
    created_at: datetime
    updated_at: Optional[datetime]
    recorder: UserResponse

    class Config:
        from_attributes = True

# Security Schemas
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    sub: str # user_id as string
    scopes: List[str] = []


# /emr_backend/security.py
from datetime import datetime, timedelta, timezone
from typing import Optional, List
from uuid import UUID
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from config import settings
from database import get_db
import models
import schemas

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", scopes={"clinician": "Read and write clinical data.", "admin": "Manage users."})

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

async def get_user_by_id(db: AsyncSession, user_id: UUID) -> Optional[models.User]:
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    return result.scalars().first()

async def get_current_user(
    token: str = Depends(oauth2_scheme), 
    db: AsyncSession = Depends(get_db)
) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id_str: Optional[str] = payload.get("sub")
        if user_id_str is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        token_data = schemas.TokenData(scopes=token_scopes, sub=user_id_str)
        user_id = UUID(token_data.sub)
    except (JWTError, ValueError):
        raise credentials_exception
    
    user = await get_user_by_id(db, user_id=user_id)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(
    current_user: models.User = Depends(get_current_user)
) -> models.User:
    if not current_user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_user

class RoleChecker:
    """
    Dependency to check if the current user has the required role.
    """
    def __init__(self, allowed_roles: List[models.UserRole]):
        self.allowed_roles = allowed_roles

    def __call__(self, user: models.User = Depends(get_current_active_user)):
        if user.role not in self.allowed_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Operation not permitted for the current user role."
            )
        return user

allow_clinician = RoleChecker([models.UserRole.CLINICIAN, models.UserRole.ADMIN])


# /emr_backend/auditing.py
from fastapi import Request, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from database import get_db
import models
import schemas
from security import get_current_user
from uuid import UUID

class AuditLogger:
    def __init__(
        self,
        request: Request,
        db: AsyncSession = Depends(get_db),
    ):
        self.db = db
        self.ip_address = request.client.host if request.client else "unknown"

    async def log(
        self,
        user: models.User,
        action: models.AuditAction,
        patient_context_id: Optional[UUID] = None,
        details: Optional[dict] = None
    ):
        audit_log_entry = models.AuditLog(
            user_id=user.id,
            action=action,
            patient_context_id=patient_context_id,
            details=details,
            ip_address=self.ip_address
        )
        self.db.add(audit_log_entry)
        await self.db.commit()


# /emr_backend/crud/allergy_crud.py
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from uuid import UUID
from typing import List, Optional

import models
import schemas

async def get_allergies_by_patient(db: AsyncSession, patient_id: UUID, skip: int = 0, limit: int = 100) -> List[models.Allergy]:
    query = (
        select(models.Allergy)
        .where(models.Allergy.patient_id == patient_id, models.Allergy.is_active.is_not(None))
        .options(selectinload(models.Allergy.recorder))
        .order_by(models.Allergy.created_at.desc())
        .offset(skip)
        .limit(limit)
    )
    result = await db.execute(query)
    return result.scalars().all()

async def create_patient_allergy(db: AsyncSession, patient_id: UUID, allergy: schemas.AllergyCreate, recorder_id: UUID) -> models.Allergy:
    db_allergy = models.Allergy(
        **allergy.model_dump(),
        patient_id=patient_id,
        recorder_id=recorder_id
    )
    db.add(db_allergy)
    await db.commit()
    await db.refresh(db_allergy, attribute_names=['recorder'])
    return db_allergy

async def update_allergy(db: AsyncSession, allergy_id: UUID, allergy_update: schemas.AllergyUpdate) -> Optional[models.Allergy]:
    query = select(models.Allergy).where(models.Allergy.id == allergy_id)
    result = await db.execute(query)
    db_allergy = result.scalars().first()

    if db_allergy:
        update_data = allergy_update.model_dump(exclude_unset=True)
        for key, value in update_data.items():
            setattr(db_allergy, key, value)
        
        await db.commit()
        await db.refresh(db_allergy, attribute_names=['recorder'])
    return db_allergy

async def deactivate_allergy(db: AsyncSession, allergy_id: UUID) -> Optional[models.Allergy]:
    query = select(models.Allergy).where(models.Allergy.id == allergy_id)
    result = await db.execute(query)
    db_allergy = result.scalars().first()

    if db_allergy:
        db_allergy.is_active = None # Mark as inactive
        await db.commit()
        await db.refresh(db_allergy)
    return db_allergy


# /emr_backend/api/v1/endpoints/allergies.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import UUID
from typing import List

from database import get_db
import schemas
import models
from crud import allergy_crud
from security import get_current_active_user, allow_clinician
from auditing import AuditLogger

router = APIRouter()

@router.get(
    "/{patient_id}/allergies",
    response_model=List[schemas.AllergyResponse],
    summary="List allergies for a patient",
    dependencies=[Depends(allow_clinician)],
    tags=["Allergies"]
)
async def read_patient_allergies(
    patient_id: UUID,
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
    auditor: AuditLogger = Depends(),
    current_user: models.User = Depends(get_current_active_user)
):
    """
    Retrieve all active allergy records for a specific patient.
    Requires clinician-level access.
    """
    allergies = await allergy_crud.get_allergies_by_patient(db, patient_id=patient_id, skip=skip, limit=limit)
    await auditor.log(
        user=current_user,
        action=models.AuditAction.READ,
        patient_context_id=patient_id,
        details={"resource": "allergy", "count": len(allergies)}
    )
    return allergies

@router.post(
    "/{patient_id}/allergies",
    response_model=schemas.AllergyResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new allergy record for a patient",
    dependencies=[Depends(allow_clinician)],
    tags=["Allergies"]
)
async def create_new_allergy(
    patient_id: UUID,
    allergy: schemas.AllergyCreate,
    db: AsyncSession = Depends(get_db),
    auditor: AuditLogger = Depends(),
    current_user: models.User = Depends(get_current_active_user)
):
    """
    Create a new allergy record for a given patient. The recorder is the
    currently authenticated user.
    """
    new_allergy = await allergy_crud.create_patient_allergy(
        db=db, patient_id=patient_id, allergy=allergy, recorder_id=current_user.id
    )
    await auditor.log(
        user=current_user,
        action=models.AuditAction.CREATE,
        patient_context_id=patient_id,
        details={"resource": "allergy", "resource_id": str(new_allergy.id)}
    )
    return new_allergy

@router.put(
    "/allergies/{allergy_id}",
    response_model=schemas.AllergyResponse,
    summary="Update an existing allergy record",
    dependencies=[Depends(allow_clinician)],
    tags=["Allergies"]
)
async def update_existing_allergy(
    allergy_id: UUID,
    allergy_update: schemas.AllergyUpdate,
    db: AsyncSession = Depends(get_db),
    auditor: AuditLogger = Depends(),
    current_user: models.User = Depends(get_current_active_user)
):
    """
    Update details of a specific allergy record.
    """
    updated_allergy = await allergy_crud.update_allergy(db, allergy_id=allergy_id, allergy_update=allergy_update)
    if not updated_allergy:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Allergy record not found")
    
    await auditor.log(
        user=current_user,
        action=models.AuditAction.UPDATE,
        patient_context_id=updated_allergy.patient_id,
        details={
            "resource": "allergy", 
            "resource_id": str(allergy_id), 
            "changes": allergy_update.model_dump(exclude_unset=True)
        }
    )
    return updated_allergy

@router.delete(
    "/allergies/{allergy_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Deactivate an allergy record",
    dependencies=[Depends(allow_clinician)],
    tags=["Allergies"]
)
async def delete_allergy(
    allergy_id: UUID,
    db: AsyncSession = Depends(get_db),
    auditor: AuditLogger = Depends(),
    current_user: models.User = Depends(get_current_active_user)
):
    """
    Deactivates an allergy record (soft delete), marking it as entered in error or resolved.
    The record remains in the database for historical and auditing purposes but is not considered active.
    """
    deactivated_allergy = await allergy_crud.deactivate_allergy(db, allergy_id=allergy_id)
    if not deactivated_allergy:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Allergy record not found")
    
    await auditor.log(
        user=current_user,
        action=models.AuditAction.DELETE,
        patient_context_id=deactivated_allergy.patient_id,
        details={"resource": "allergy", "resource_id": str(allergy_id), "note": "Allergy marked as inactive"}
    )
    return

# /emr_backend/main.py
from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from sqlalchemy.exc import SQLAlchemyError
from api.v1.endpoints import allergies

app = FastAPI(
    title="EMR Backend Service",
    description="Electronic Medical Record API compliant with HIPAA standards.",
    version="1.0.0",
)

# Exception handler for validation errors to prevent verbose output
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": "Validation error", "errors": exc.errors()},
    )

# Generic exception handler to prevent leaking internal implementation details
@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # In a real production environment, this would log the full exception to a secure logging service.
    # For HIPAA compliance, we must not return detailed internal errors to the client.
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "An internal server error occurred."},
    )

@app.exception_handler(SQLAlchemyError)
async def sqlalchemy_exception_handler(request: Request, exc: SQLAlchemyError):
    # Handles database-related errors specifically, preventing leaks of DB schema or data.
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "A database error occurred."},
    )


# Mount the API routers
app.include_router(
    allergies.router,
    prefix="/api/v1/patients",
    tags=["Patient Data"]
)

@app.get("/health", status_code=status.HTTP_200_OK, tags=["System"])
async def health_check():
    """
    Simple health check endpoint.
    """
    return {"status": "ok"}

# The following would be in a separate auth endpoint file, but is included here for completeness
# of a runnable example. It should not exist in the final allergy service.
from fastapi.security import OAuth2PasswordRequestForm
from crud.user_crud import authenticate_user

@app.post("/token", response_model=schemas.Token, tags=["Authentication"])
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(), 
    db: AsyncSession = Depends(get_db)
):
    user = await authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": str(user.id), "scopes": [user.role.value]},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# Need to add user_crud for the /token endpoint to work
# /emr_backend/crud/user_crud.py
from sqlalchemy.future import select
from security import verify_password

async def get_user_by_username(db: AsyncSession, username: str) -> Optional[models.User]:
    result = await db.execute(select(models.User).where(models.User.username == username))
    return result.scalars().first()

async def authenticate_user(db: AsyncSession, username: str, password: str) -> Optional[models.User]:
    user = await get_user_by_username(db, username)
    if not user or not user.is_active:
        return None
    if not verify_password(password, user.hashed_password):
        return None
    return user
```