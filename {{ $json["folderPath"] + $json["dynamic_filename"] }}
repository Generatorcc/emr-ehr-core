```python
#
# EMR Backend Service: Patient Record System
# Framework: FastAPI
# Specification: Securely fetch a patient's medical record summary.
#
# This system is designed with HIPAA compliance as a primary requirement.
# All access to Protected Health Information (PHI) is authenticated,
# authorized, and comprehensively audited.
#

# ==============================================================================
# File: core/config.py
# Description: Application configuration management using Pydantic.
# ==============================================================================

import os
from pydantic import BaseSettings, Field

class Settings(BaseSettings):
    """
    Application settings loaded from environment variables.
    A .env file can be used for local development.
    """
    # Database Configuration
    DATABASE_URL: str = Field(..., env="DATABASE_URL")

    # JWT Authentication Configuration
    SECRET_KEY: str = Field(..., env="SECRET_KEY")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 # Token valid for 1 hour

    # API Configuration
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "EMR Patient Record System"

    class Config:
        case_sensitive = True
        # To load from a .env file for local development:
        # from dotenv import load_dotenv
        # load_dotenv()
        env_file = ".env"
        env_file_encoding = 'utf-8'

settings = Settings()


# ==============================================================================
# File: db/base_class.py
# Description: SQLAlchemy Base for declarative models.
# ==============================================================================

from sqlalchemy.ext.declarative import as_declarative, declared_attr

@as_declarative()
class Base:
    """Base class for SQLAlchemy models."""
    id: int
    __name__: str

    # Generate __tablename__ automatically
    @declared_attr
    def __tablename__(cls) -> str:
        return cls.__name__.lower() + "s"


# ==============================================================================
# File: models/user.py
# Description: SQLAlchemy model for Users (Healthcare Providers).
# ==============================================================================

from sqlalchemy import Column, Integer, String, Boolean
# from db.base_class import Base # In a real project structure

class User(Base):
    """Represents a healthcare provider or system user."""
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    full_name = Column(String(255), index=True)
    username = Column(String(255), unique=True, index=True, nullable=False)
    hashed_password = Column(String(255), nullable=False)
    role = Column(String(50), nullable=False) # e.g., 'clinician', 'admin', 'biller'
    is_active = Column(Boolean(), default=True)


# ==============================================================================
# File: models/patient.py
# Description: SQLAlchemy model for Patients.
# ==============================================================================

from sqlalchemy import Column, Integer, String, Date
# from db.base_class import Base # In a real project structure

class Patient(Base):
    """Represents a patient record in the EMR."""
    __tablename__ = "patients"

    id = Column(Integer, primary_key=True, index=True)
    mrn = Column(String(50), unique=True, index=True, nullable=False) # Medical Record Number
    first_name = Column(String(255), nullable=False)
    last_name = Column(String(255), nullable=False)
    date_of_birth = Column(Date, nullable=False)


# ==============================================================================
# File: models/audit_log.py
# Description: SQLAlchemy model for HIPAA Audit Logs.
# ==============================================================================

from sqlalchemy import Column, Integer, String, DateTime, ForeignKey
from sqlalchemy.sql import func
# from db.base_class import Base # In a real project structure

class AuditLog(Base):
    """Represents an audit trail event for HIPAA compliance."""
    __tablename__ = "audit_logs"

    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    client_ip_address = Column(String(100))
    action = Column(String(255), nullable=False) # e.g., 'VIEW_PATIENT_SUMMARY'
    resource_type = Column(String(100), nullable=False) # e.g., 'Patient'
    resource_id = Column(Integer, nullable=False)
    details = Column(String, nullable=True) # Optional details about the event


# ==============================================================================
# File: db/session.py
# Description: Database session and engine setup.
# ==============================================================================

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# The `connect_args` is for SQLite only, remove for PostgreSQL.
# For PostgreSQL in production, use connection pooling and SSL.
engine = create_engine(
    settings.DATABASE_URL,
    pool_pre_ping=True,
    connect_args={"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_db():
    """Dependency to get a DB session for a request."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ==============================================================================
# File: schemas/token.py
# Description: Pydantic schemas for JWT tokens.
# ==============================================================================

from pydantic import BaseModel
from typing import Optional

class Token(BaseModel):
    """Schema for the access token response."""
    access_token: str
    token_type: str

class TokenData(BaseModel):
    """Schema for the data encoded within the JWT."""
    username: Optional[str] = None


# ==============================================================================
# File: schemas/user.py
# Description: Pydantic schemas for Users.
# ==============================================================================

# from pydantic import BaseModel # Imported in previous schema

class UserBase(BaseModel):
    """Base user schema."""
    username: str

class UserInDB(UserBase):
    """User schema for data retrieved from the database."""
    id: int
    full_name: str
    role: str
    is_active: bool

    class Config:
        orm_mode = True


# ==============================================================================
# File: schemas/patient.py
# Description: Pydantic schemas for Patients, ensuring no raw PHI leakage.
# ==============================================================================

import datetime
# from pydantic import BaseModel # Imported in previous schema

class PatientSummary(BaseModel):
    """
    A secure, limited view of a patient's record for summary purposes.
    This model explicitly defines the fields returned by the API,
    preventing accidental exposure of other sensitive data from the DB model.
    """
    mrn: str
    first_name: str
    last_name: str
    date_of_birth: datetime.date

    class Config:
        orm_mode = True


# ==============================================================================
# File: schemas/audit_log.py
# Description: Pydantic schemas for creating audit log entries.
# ==============================================================================

# from pydantic import BaseModel # Imported in previous schema

class AuditLogCreate(BaseModel):
    """Schema for creating a new audit log entry."""
    user_id: int
    client_ip_address: Optional[str] = None
    action: str
    resource_type: str
    resource_id: int
    details: Optional[str] = None


# ==============================================================================
# File: crud/crud_audit_log.py
# Description: CRUD operations for AuditLog model.
# ==============================================================================

from sqlalchemy.orm import Session
# from models.audit_log import AuditLog
# from schemas.audit_log import AuditLogCreate

def create_audit_log(db: Session, *, obj_in: AuditLogCreate) -> AuditLog:
    """Creates a new audit log entry in the database."""
    db_obj = AuditLog(**obj_in.dict())
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj


# ==============================================================================
# File: crud/crud_user.py
# Description: CRUD operations for User model.
# ==============================================================================

# from sqlalchemy.orm import Session # Imported above
# from models.user import User # Imported above

def get_user_by_username(db: Session, *, username: str) -> Optional[User]:
    """Retrieves a user by their username."""
    return db.query(User).filter(User.username == username).first()


# ==============================================================================
# File: crud/crud_patient.py
# Description: CRUD operations for Patient model.
# ==============================================================================

# from sqlalchemy.orm import Session # Imported above
# from models.patient import Patient # Imported above

def get_patient_by_id(db: Session, *, patient_id: int) -> Optional[Patient]:
    """Retrieves a patient by their primary key ID."""
    return db.query(Patient).filter(Patient.id == patient_id).first()


# ==============================================================================
# File: core/security.py
# Description: Handles password hashing, JWT creation, and user auth dependency.
# ==============================================================================

from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer
# from sqlalchemy.orm import Session # Imported above
# from core.config import settings
# from db.session import get_db
# from crud import crud_user
# from models.user import User
# from schemas.token import TokenData

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f"{settings.API_V1_STR}/login/token")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verifies a plain password against a hashed one."""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Hashes a plain password."""
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    """Creates a new JWT access token."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

def get_current_user(
    db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)
) -> User:
    """
    Dependency to get the current user from a JWT token.
    Raises HTTPException if the token is invalid or the user does not exist.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception

    user = crud_user.get_user_by_username(db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user

def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:
    """
    Dependency that builds on get_current_user to ensure the user is active.
    This is the primary dependency for protecting PHI-related endpoints.
    """
    if not current_user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_user


# ==============================================================================
# File: api/v1/endpoints/login.py
# Description: API endpoint for user authentication and token issuance.
# ==============================================================================

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
# from sqlalchemy.orm import Session # Imported above
# from core import security
# from db.session import get_db
# from crud import crud_user
# from schemas.token import Token

router = APIRouter()

@router.post("/login/token", response_model=Token)
def login_for_access_token(
    db: Session = Depends(get_db), form_data: OAuth2PasswordRequestForm = Depends()
):
    """
    Authenticates a user and returns a JWT access token.
    """
    user = crud_user.get_user_by_username(db, username=form_data.username)
    if not user or not security.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    if not user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    
    access_token = security.create_access_token(data={"sub": user.username})
    return {"access_token": access_token, "token_type": "bearer"}


# ==============================================================================
# File: api/v1/endpoints/patients.py
# Description: API endpoints for managing patient data.
# ==============================================================================

# from fastapi import APIRouter, Depends, HTTPException, status, Request # Imported above
# from sqlalchemy.orm import Session # Imported above
# from core.security import get_current_active_user
# from db.session import get_db
# from models.user import User
# from models.patient import Patient
# from crud import crud_patient, crud_audit_log
# from schemas.patient import PatientSummary
# from schemas.audit_log import AuditLogCreate

router = APIRouter()

def check_authorization(user: User, patient: Patient) -> bool:
    """
    Performs an authorization check.
    In a real-world system, this would involve checking a patient-provider
    relationship table, verifying user roles against access policies,
    or checking for 'break-the-glass' emergency access flags.

    For this implementation, we use a role-based check: only 'clinician'
    or 'admin' roles can view patient data.
    """
    if user.role in ["clinician", "admin"]:
        # Further checks could be added here, e.g., is user assigned to this patient.
        return True
    return False

@router.get("/{patient_id}/summary", response_model=PatientSummary)
def read_patient_summary(
    *,
    db: Session = Depends(get_db),
    patient_id: int,
    request: Request,
    current_user: User = Depends(get_current_active_user),
):
    """
    Securely retrieve a summary of a single patient's record.
    Access is strictly controlled, and the action is audited.
    """
    patient = crud_patient.get_patient_by_id(db, patient_id=patient_id)
    if not patient:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Patient not found")

    # --- HIPAA Security: Authorization Check ---
    if not check_authorization(current_user, patient):
        # Even if unauthorized, log the access attempt for security monitoring.
        crud_audit_log.create_audit_log(
            db, obj_in=AuditLogCreate(
                user_id=current_user.id,
                client_ip_address=request.client.host,
                action="ACCESS_DENIED_PATIENT_SUMMARY",
                resource_type="Patient",
                resource_id=patient.id,
                details=f"User role '{current_user.role}' insufficient."
            )
        )
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to access this patient's records")

    # --- HIPAA Security: Audit Logging ---
    crud_audit_log.create_audit_log(
        db, obj_in=AuditLogCreate(
            user_id=current_user.id,
            client_ip_address=request.client.host,
            action="VIEW_PATIENT_SUMMARY",
            resource_type="Patient",
            resource_id=patient.id
        )
    )

    return patient


# ==============================================================================
# File: api/v1/api.py
# Description: Aggregates all API routers for version 1.
# ==============================================================================

from fastapi import APIRouter
# from api.v1.endpoints import login, patients # In a real project structure

api_router = APIRouter()
api_router.include_router(login.router, tags=["login"])
api_router.include_router(patients.router, prefix="/patients", tags=["patients"])


# ==============================================================================
# File: main.py
# Description: Main application entry point.
# ==============================================================================

from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware
# from core.config import settings
# from api.v1.api import api_router # In a real project structure

app = FastAPI(
    title=settings.PROJECT_NAME,
    openapi_url=f"{settings.API_V1_STR}/openapi.json"
)

# Set all CORS enabled origins
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # In production, restrict this to trusted domains
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(api_router, prefix=settings.API_V1_STR)

@app.get("/", status_code=status.HTTP_200_OK)
def root() -> dict:
    """
    Root endpoint for health checks.
    """
    return {"status": "ok", "system": settings.PROJECT_NAME}

# Example of how to run this application:
# 1. Create a virtual environment and install dependencies:
#    pip install "fastapi[all]" sqlalchemy "psycopg2-binary" "python-jose[cryptography]" "passlib[bcrypt]" python-dotenv
# 2. Create a .env file with DATABASE_URL and SECRET_KEY.
# 3. Create database tables from models (e.g., using Alembic migrations).
# 4. Populate the 'users' and 'patients' tables with sample data.
# 5. Run the server: uvicorn main:app --reload
```