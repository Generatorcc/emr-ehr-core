```python
# /config.py
# Description: Configuration management for the application.

import os
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """
    Application settings loaded from environment variables.
    """
    # Database Configuration
    DATABASE_URL: str = os.getenv("DATABASE_URL", "postgresql+asyncpg://user:password@localhost/emr_db")
    
    # JWT Configuration
    JWT_SECRET_KEY: str = os.getenv("JWT_SECRET_KEY", "a_very_secret_key_for_a_hipaa_compliant_system_32_chars")
    JWT_ALGORITHM: str = "HS256"
    JWT_ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # S3 Storage Configuration for PHI
    S3_BUCKET_NAME: str = os.getenv("S3_BUCKET_NAME", "emr-hipaa-compliant-documents")
    S3_AWS_ACCESS_KEY_ID: str = os.getenv("S3_AWS_ACCESS_KEY_ID", "minioadmin")
    S3_AWS_SECRET_ACCESS_KEY: str = os.getenv("S3_AWS_SECRET_ACCESS_KEY", "minioadmin")
    S3_ENDPOINT_URL: str = os.getenv("S3_ENDPOINT_URL", "http://localhost:9000")
    S3_PRESIGNED_URL_EXPIRATION_SECONDS: int = 300  # 5 minutes

    # System settings
    API_V1_STR: str = "/api/v1"

    class Config:
        case_sensitive = True


settings = Settings()

# /database.py
# Description: Database session and connection management.

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from config import settings

engine = create_async_engine(settings.DATABASE_URL, pool_pre_ping=True, echo=False)
AsyncSessionLocal = sessionmaker(
    autocommit=False, 
    autoflush=False, 
    bind=engine, 
    class_=AsyncSession
)

# /models.py
# Description: SQLAlchemy ORM models for database tables.

import uuid
from sqlalchemy import (
    Column, String, DateTime, func, BigInteger, JSON
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import declarative_base

Base = declarative_base()


class Document(Base):
    """
    Represents metadata for a patient document stored in S3.
    """
    __tablename__ = "documents"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    patient_id = Column(String, nullable=False, index=True)
    uploader_user_id = Column(String, nullable=False)
    document_type = Column(String, nullable=False, default="general")
    original_filename = Column(String, nullable=False)
    s3_object_key = Column(String, nullable=False, unique=True)
    file_size_bytes = Column(BigInteger, nullable=False)
    mime_type = Column(String, nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    deleted_at = Column(DateTime(timezone=True), nullable=True) # Soft delete


class AuditLog(Base):
    """
    Represents a HIPAA-compliant audit trail entry.
    """
    __tablename__ = "audit_logs"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    user_id = Column(String, nullable=False, index=True)
    action = Column(String, nullable=False, index=True)
    patient_id = Column(String, nullable=True, index=True)
    resource_id = Column(String, nullable=True)
    details = Column(JSON, nullable=True)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    ip_address = Column(String, nullable=False)


# /schemas.py
# Description: Pydantic models for API request/response validation and serialization.

from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime
import uuid


# --- Authentication Schemas ---
class TokenData(BaseModel):
    user_id: str
    scopes: List[str] = []


class AuthenticatedUser(BaseModel):
    id: str
    roles: List[str]
    is_active: bool


# --- Document Schemas ---
class DocumentMetadataResponse(BaseModel):
    id: uuid.UUID
    patient_id: str
    uploader_user_id: str
    document_type: str
    original_filename: str
    file_size_bytes: int
    mime_type: str
    created_at: datetime

    class Config:
        orm_mode = True


class PresignedUrlResponse(BaseModel):
    url: str
    method: str = Field("GET", description="The HTTP method to use for the URL.")
    expires_at: datetime


# --- Audit Schemas ---
class AuditLogCreate(BaseModel):
    user_id: str
    action: str
    ip_address: str
    patient_id: Optional[str] = None
    resource_id: Optional[str] = None
    details: Optional[dict] = None

# /services/audit_service.py
# Description: Service for creating audit log entries.

from sqlalchemy.ext.asyncio import AsyncSession
from models import AuditLog
from schemas import AuditLogCreate


async def create_audit_log(db: AsyncSession, log_entry: AuditLogCreate) -> AuditLog:
    """
    Persists an audit log entry to the database.
    """
    db_log = AuditLog(**log_entry.dict())
    db.add(db_log)
    await db.commit()
    await db.refresh(db_log)
    return db_log


# /services/s3_service.py
# Description: Service for interacting with S3-compatible storage.

import logging
import boto3
from botocore.exceptions import ClientError
from datetime importdatetime, timedelta, timezone
from fastapi import UploadFile
from config import settings
from schemas import PresignedUrlResponse

logger = logging.getLogger(__name__)

s3_client = boto3.client(
    "s3",
    endpoint_url=settings.S3_ENDPOINT_URL,
    aws_access_key_id=settings.S3_AWS_ACCESS_KEY_ID,
    aws_secret_access_key=settings.S3_AWS_SECRET_ACCESS_KEY,
)


async def upload_file_to_s3(
    file: UploadFile, 
    patient_id: str, 
    document_uuid: str
) -> str:
    """
    Uploads a file to S3 with server-side encryption and returns the object key.
    The key structure ensures data segregation by patient.
    """
    s3_object_key = f"{patient_id}/{document_uuid}/{file.filename}"
    try:
        s3_client.upload_fileobj(
            file.file,
            settings.S3_BUCKET_NAME,
            s3_object_key,
            ExtraArgs={"ServerSideEncryption": "AES256"},
        )
    except ClientError as e:
        logger.error(f"Failed to upload {s3_object_key} to S3: {e}")
        raise ConnectionError("Could not upload file to secure storage.")
    
    return s3_object_key


async def generate_presigned_url(
    s3_object_key: str
) -> PresignedUrlResponse:
    """
    Generates a temporary, secure URL for downloading a file from S3.
    """
    try:
        url = s3_client.generate_presigned_url(
            "get_object",
            Params={"Bucket": settings.S3_BUCKET_NAME, "Key": s3_object_key},
            ExpiresIn=settings.S3_PRESIGNED_URL_EXPIRATION_SECONDS,
        )
        expires_at = datetime.now(timezone.utc) + timedelta(seconds=settings.S3_PRESIGNED_URL_EXPIRATION_SECONDS)
        
        return PresignedUrlResponse(url=url, expires_at=expires_at)
        
    except ClientError as e:
        logger.error(f"Failed to generate presigned URL for {s3_object_key}: {e}")
        raise ConnectionError("Could not generate secure download link.")


# /crud.py
# Description: Data Access Layer for database operations.

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import List, Optional
import uuid

from models import Document
from schemas import DocumentMetadataResponse


async def create_document_metadata(
    db: AsyncSession, *, 
    patient_id: str, 
    uploader_user_id: str,
    document_type: str,
    original_filename: str,
    s3_object_key: str,
    file_size_bytes: int,
    mime_type: str,
    doc_uuid: uuid.UUID
) -> Document:
    """Creates and stores a document's metadata in the database."""
    db_obj = Document(
        id=doc_uuid,
        patient_id=patient_id,
        uploader_user_id=uploader_user_id,
        document_type=document_type,
        original_filename=original_filename,
        s3_object_key=s3_object_key,
        file_size_bytes=file_size_bytes,
        mime_type=mime_type,
    )
    db.add(db_obj)
    await db.commit()
    await db.refresh(db_obj)
    return db_obj


async def get_document_by_id(db: AsyncSession, document_id: uuid.UUID) -> Optional[Document]:
    """Retrieves a document's metadata by its UUID."""
    result = await db.execute(select(Document).where(Document.id == document_id, Document.deleted_at == None))
    return result.scalars().first()


async def get_documents_for_patient(db: AsyncSession, patient_id: str) -> List[DocumentMetadataResponse]:
    """Retrieves all non-deleted document metadata for a given patient."""
    result = await db.execute(
        select(Document).where(Document.patient_id == patient_id, Document.deleted_at == None).order_by(Document.created_at.desc())
    )
    return result.scalars().all()

# /auth.py
# Description: Authentication and authorization dependencies.

from fastapi import Depends, HTTPException, status, Security
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from pydantic import ValidationError
from typing import List

from config import settings
from schemas import TokenData, AuthenticatedUser

# This scheme will look for a bearer token in the Authorization header.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class RoleChecker:
    """Dependency to check if user has all required roles."""
    def __init__(self, allowed_roles: List[str]):
        self.allowed_roles = allowed_roles

    def __call__(self, user: AuthenticatedUser = Depends(lambda: get_current_active_user([]))):
        if not any(role in self.allowed_roles for role in user.roles):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="User does not have the required role."
            )

async def get_current_user(token: str = Depends(oauth2_scheme)) -> AuthenticatedUser:
    """Decodes JWT and returns user information."""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(
            token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM]
        )
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
        
        # In a real system, you would fetch user details from a user database here.
        # For this example, we mock a user object based on token payload.
        token_data = TokenData(user_id=user_id, scopes=payload.get("scopes", []))
        user = AuthenticatedUser(
            id=user_id, 
            roles=payload.get("roles", ["clinician"]), # Mock roles
            is_active=True
        )

    except (JWTError, ValidationError):
        raise credentials_exception
    
    return user

async def get_current_active_user(
    required_scopes: List[str] = [],
    user: AuthenticatedUser = Depends(get_current_user),
) -> AuthenticatedUser:
    """Verifies that the user is active and has the required scopes."""
    if not user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")

    # This part is stubbed for the example; real token would contain scopes.
    token_scopes = ["documents:read", "documents:upload"] # Assume user has these scopes
    for scope in required_scopes:
        if scope not in token_scopes:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Not enough permissions. Requires scope: {scope}",
                headers={"WWW-Authenticate": "Bearer"},
            )
    return user

# /services/authorization_service.py
# Description: Business logic for checking user access permissions to patient data.

from fastapi import Depends, HTTPException, status
from schemas import AuthenticatedUser
from auth import get_current_active_user

async def check_user_access_to_patient(
    patient_id: str,
    user: AuthenticatedUser = Depends(get_current_active_user)
):
    """
    Verifies if the currently authenticated user has rights to access a specific patient's data.

    In a production EMR, this would involve a complex query against tables defining
    patient-provider relationships, care teams, administrative overrides ("break-the-glass"), etc.
    This function serves as a critical, mandatory authorization gate.
    """
    #
    # --- PRODUCTION IMPLEMENTATION REQUIRED ---
    # Example logic: A user can access a patient if they are in the 'clinician' role
    # AND are assigned to this patient in a (hypothetical) `care_team` table.
    # For this example, we'll use a simplified check.
    #
    is_authorized = False
    if "admin" in user.roles:
        is_authorized = True
    elif "clinician" in user.roles:
        # Here you would query your database:
        # e.g., SELECT 1 FROM care_team WHERE user_id = :user_id AND patient_id = :patient_id
        # For demonstration, we'll allow access to a specific patient ID.
        if patient_id == "patient-123-demodata":
             is_authorized = True

    if not is_authorized:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=f"User {user.id} is not authorized to access data for patient {patient_id}.",
        )
    return True

# /routers/documents.py
# Description: API endpoints for managing patient documents.

import uuid
from fastapi import APIRouter, Depends, UploadFile, File, Form, HTTPException, status, Request
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from database import AsyncSessionLocal
from schemas import (
    DocumentMetadataResponse, AuthenticatedUser, AuditLogCreate, PresignedUrlResponse
)
from auth import get_current_active_user
from services import audit_service, s3_service, authorization_service
import crud

router = APIRouter()

# Dependency for getting a DB session
async def get_db():
    async with AsyncSessionLocal() as session:
        yield session

@router.post(
    "/patients/{patient_id}/documents",
    response_model=DocumentMetadataResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Upload a Patient Document",
    tags=["Documents"],
)
async def upload_document(
    request: Request,
    patient_id: str,
    file: UploadFile = File(...),
    document_type: str = Form("general"),
    user: AuthenticatedUser = Depends(lambda: get_current_active_user(required_scopes=["documents:upload"])),
    db: AsyncSession = Depends(get_db)
):
    """
    Uploads a document for a specified patient. Requires `documents:upload` scope.

    - **Verifies** user authorization for the patient.
    - **Uploads** the file to a secure, encrypted S3 bucket.
    - **Creates** a metadata record in the database.
    - **Logs** the entire transaction in the audit trail.
    """
    await authorization_service.check_user_access_to_patient(patient_id, user)
    
    doc_uuid = uuid.uuid4()
    
    s3_object_key = await s3_service.upload_file_to_s3(file, patient_id, str(doc_uuid))
    
    file_size = file.file.tell() # Get size after upload

    db_document = await crud.create_document_metadata(
        db=db,
        doc_uuid=doc_uuid,
        patient_id=patient_id,
        uploader_user_id=user.id,
        document_type=document_type,
        original_filename=file.filename,
        s3_object_key=s3_object_key,
        file_size_bytes=file_size,
        mime_type=file.content_type
    )

    await audit_service.create_audit_log(db, AuditLogCreate(
        user_id=user.id,
        action="DOCUMENT_UPLOAD",
        ip_address=request.client.host,
        patient_id=patient_id,
        resource_id=str(db_document.id),
        details={"filename": file.filename, "size": file_size, "type": document_type}
    ))

    return db_document

@router.get(
    "/patients/{patient_id}/documents",
    response_model=List[DocumentMetadataResponse],
    summary="List Patient Documents",
    tags=["Documents"],
)
async def list_patient_documents(
    request: Request,
    patient_id: str,
    user: AuthenticatedUser = Depends(lambda: get_current_active_user(required_scopes=["documents:read"])),
    db: AsyncSession = Depends(get_db)
):
    """
    Lists all document metadata for a given patient. Requires `documents:read` scope.
    """
    await authorization_service.check_user_access_to_patient(patient_id, user)
    
    documents = await crud.get_documents_for_patient(db=db, patient_id=patient_id)

    await audit_service.create_audit_log(db, AuditLogCreate(
        user_id=user.id,
        action="DOCUMENT_LIST_VIEW",
        ip_address=request.client.host,
        patient_id=patient_id,
        details={"document_count": len(documents)}
    ))

    return documents


@router.get(
    "/documents/{document_id}/download-url",
    response_model=PresignedUrlResponse,
    summary="Get Secure Download URL for a Document",
    tags=["Documents"],
)
async def get_document_download_url(
    request: Request,
    document_id: uuid.UUID,
    user: AuthenticatedUser = Depends(lambda: get_current_active_user(required_scopes=["documents:read"])),
    db: AsyncSession = Depends(get_db)
):
    """
    Retrieves a time-limited, secure presigned URL to download a document directly from storage.
    """
    document = await crud.get_document_by_id(db=db, document_id=document_id)
    if not document:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Document not found")
    
    await authorization_service.check_user_access_to_patient(document.patient_id, user)
    
    url_response = await s3_service.generate_presigned_url(document.s3_object_key)

    await audit_service.create_audit_log(db, AuditLogCreate(
        user_id=user.id,
        action="DOCUMENT_DOWNLOAD_ACCESS",
        ip_address=request.client.host,
        patient_id=document.patient_id,
        resource_id=str(document.id),
        details={"filename": document.original_filename}
    ))

    return url_response

# /main.py
# Description: Main application entrypoint.

from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from config import settings
from routers import documents

# Initialize FastAPI app
app = FastAPI(
    title="Secure EMR System",
    description="HIPAA-compliant backend services for a modern EMR.",
    version="1.0.0",
)

# --- Exception Handlers for Secure Error Responses ---
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handles request validation errors to prevent leaking internal details."""
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": "Invalid request payload provided."},
    )

@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    """Handles all other exceptions, returning a generic 500 error."""
    # In production, you would log the full exception `exc` here.
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "An unexpected internal error occurred."},
    )

# --- Routers ---
app.include_router(documents.router, prefix=settings.API_V1_STR)

@app.get("/health", summary="Health Check", tags=["System"])
def health_check():
    """Provides a basic health check endpoint for monitoring."""
    return {"status": "ok"}

```