```python
# /config.py
# Description: Manages application configuration using environment variables.

import os
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    """
    Application settings loaded from environment variables.
    """
    # Database Configuration
    DATABASE_URL: str = "postgresql+asyncpg://user:password@localhost/emr_db"

    # JWT Security
    SECRET_KEY: str = "a_very_secure_secret_key_that_is_at_least_32_bytes_long"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60  # Token valid for 60 minutes

    # API Version
    API_V1_STR: str = "/api/v1"

    model_config = SettingsConfigDict(env_file=".env", env_file_encoding='utf-8')

settings = Settings()

```

```python
# /database.py
# Description: Handles database connections and session management.

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from config import settings

# The async engine requires a specific driver, e.g., asyncpg for PostgreSQL
engine = create_async_engine(
    settings.DATABASE_URL,
    pool_pre_ping=True,
    echo=False,  # Set to True for debugging SQL queries
)

# Async session factory
AsyncSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

Base = declarative_base()

async def get_db() -> AsyncSession:
    """
    Dependency to get a database session.
    Ensures the session is properly closed after the request.
    """
    async with AsyncSessionLocal() as session:
        yield session

```

```python
# /models.py
# Description: SQLAlchemy ORM models for database tables.

import enum
from sqlalchemy import (
    Column, Integer, String, DateTime, Boolean, Enum, ForeignKey, Text
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database import Base

class UserRole(str, enum.Enum):
    ADMIN = "admin"
    CLINICIAN = "clinician"
    NURSE = "nurse"
    PATIENT = "patient"
    SYSTEM = "system"

class AuditAction(str, enum.Enum):
    CREATE = "CREATE"
    READ = "READ"
    UPDATE = "UPDATE"
    DELETE = "DELETE"
    LOGIN_SUCCESS = "LOGIN_SUCCESS"
    LOGIN_FAILURE = "LOGIN_FAILURE"
    ACCESS_DENIED = "ACCESS_DENIED"

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(255), unique=True, index=True, nullable=False)
    hashed_password = Column(String(255), nullable=False)
    full_name = Column(String(255), nullable=False)
    role = Column(Enum(UserRole), nullable=False)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

class Patient(Base):
    __tablename__ = "patients"
    id = Column(Integer, primary_key=True, index=True)
    mrn = Column(String(255), unique=True, index=True, nullable=False)
    # PHI fields should be encrypted at the application layer or via DB encryption
    first_name_encrypted = Column(Text, nullable=False)
    last_name_encrypted = Column(Text, nullable=False)
    dob_encrypted = Column(Text, nullable=False)
    gender_encrypted = Column(Text, nullable=True)
    # Non-PHI or less sensitive data can be stored directly
    is_deceased = Column(Boolean, default=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

class AuditLog(Base):
    __tablename__ = "audit_logs"
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    user_id = Column(Integer, ForeignKey("users.id"), nullable=True) # Nullable for system events
    impersonating_user_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    action = Column(Enum(AuditAction), nullable=False)
    resource_type = Column(String(255), nullable=True)
    resource_id = Column(String(255), nullable=True)
    status_code = Column(Integer, nullable=False)
    client_ip_address = Column(String(45), nullable=True)
    details = Column(Text, nullable=True)

    user = relationship("User", foreign_keys=[user_id])
    impersonating_user = relationship("User", foreign_keys=[impersonating_user_id])

```

```python
# /schemas.py
# Description: Pydantic models for API request/response validation and serialization.

from pydantic import BaseModel, Field
from typing import Optional
from datetime import date, datetime
from models import UserRole

# --- Token Schemas ---
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: list[str] = []

# --- User Schemas ---
class UserBase(BaseModel):
    username: str
    full_name: str
    role: UserRole

class UserInDB(UserBase):
    id: int
    is_active: bool
    
    class Config:
        from_attributes = True

# --- Patient Schemas ---
# This model represents the secure, limited data returned for a patient summary.
# It strictly adheres to the "minimum necessary" HIPAA principle.
class PatientRecordSummary(BaseModel):
    id: int
    mrn: str = Field(..., description="Patient's Medical Record Number")
    # In a real system, these fields would be decrypted before serialization.
    # For this example, we assume they are decrypted plain text.
    full_name: str
    date_of_birth: date
    
    class Config:
        from_attributes = True
        # An example of a resolver to combine encrypted name fields
        @staticmethod
        def from_orm(obj):
            # This is a placeholder for a real decryption and combination logic.
            # In a real implementation, you would use a secure crypto utility here.
            # For demonstration, we simulate this process.
            first_name = obj.first_name_encrypted.replace("_encrypted", "")
            last_name = obj.last_name_encrypted.replace("_encrypted", "")
            
            return {
                "id": obj.id,
                "mrn": obj.mrn,
                "full_name": f"{first_name} {last_name}",
                "date_of_birth": date.fromisoformat(obj.dob_encrypted.replace("_encrypted", "")),
            }

# --- Audit Log Schemas ---
class AuditLogBase(BaseModel):
    action: str
    resource_type: Optional[str] = None
    resource_id: Optional[str] = None
    status_code: int
    details: Optional[str] = None

class AuditLogInDB(AuditLogBase):
    id: int
    timestamp: datetime
    user_id: Optional[int] = None
    client_ip_address: Optional[str] = None
    
    class Config:
        from_attributes = True

```

```python
# /utils/audit_logger.py
# Description: HIPAA-compliant audit logging utility.

from sqlalchemy.ext.asyncio import AsyncSession
from models import AuditLog, User, AuditAction
from schemas import AuditLogBase
from typing import Optional
from fastapi import Request

async def log_audit_event(
    db: AsyncSession,
    *,
    user: Optional[User],
    action: AuditAction,
    status_code: int,
    request: Optional[Request] = None,
    resource_type: Optional[str] = None,
    resource_id: Optional[str | int] = None,
    details: Optional[str] = None,
):
    """
    Creates and saves an audit log entry. This is a critical security function.
    """
    log_entry = AuditLogBase(
        action=action,
        resource_type=resource_type,
        resource_id=str(resource_id) if resource_id is not None else None,
        status_code=status_code,
        details=details
    )
    
    db_log = AuditLog(**log_entry.model_dump())
    if user:
        db_log.user_id = user.id
    if request:
        db_log.client_ip_address = request.client.host if request.client else "unknown"

    db.add(db_log)
    await db.commit()

```

```python
# /crud.py
# Description: Core data access logic (Create, Read, Update, Delete operations).

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from models import User, Patient
from typing import Optional

async def get_user_by_username(db: AsyncSession, username: str) -> Optional[User]:
    """
    Retrieves a user from the database by their username.
    """
    result = await db.execute(select(User).filter(User.username == username))
    return result.scalars().first()

async def get_patient_by_id(db: AsyncSession, patient_id: int) -> Optional[Patient]:
    """
    Retrieves a patient from the database by their primary key ID.
    Access to this function must be strictly controlled by the API layer.
    """
    result = await db.execute(select(Patient).filter(Patient.id == patient_id))
    return result.scalars().first()

```

```python
# /auth.py
# Description: Security, authentication (OAuth2), and authorization logic.

from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer, SecurityScopes
from jose import JWTError, jwt
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import ValidationError

from config import settings
from database import get_db
from models import User, UserRole
from schemas import TokenData
import crud
from utils.audit_logger import log_audit_event, AuditAction

# OAuth2 scheme configuration
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl=f"{settings.API_V1_STR}/users/login",
    scopes={
        UserRole.ADMIN.value: "Admin access to all system functions.",
        UserRole.CLINICIAN.value: "Read and write access to patient clinical data.",
        UserRole.NURSE.value: "Read and limited write access to patient data.",
        UserRole.PATIENT.value: "Access to own patient record.",
    },
)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    """
    Creates a new JWT access token.
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

async def get_current_user(
    security_scopes: SecurityScopes,
    db: AsyncSession = Depends(get_db),
    token: str = Depends(oauth2_scheme),
    request: Request = None,
) -> User:
    """
    Dependency to get the current authenticated user from a JWT token.
    Verifies token, user existence, active status, and scopes.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    audit_user = None
    try:
        payload = jwt.decode(
            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]
        )
        username: str = payload.get("sub")
        token_scopes = payload.get("scopes", [])
        if username is None:
            raise credentials_exception
        token_data = TokenData(scopes=token_scopes, username=username)
    except (JWTError, ValidationError):
        await log_audit_event(
            db, user=None, request=request, action=AuditAction.LOGIN_FAILURE,
            status_code=status.HTTP_401_UNAUTHORIZED, details="Invalid JWT token."
        )
        raise credentials_exception

    user = await crud.get_user_by_username(db=db, username=token_data.username)
    audit_user = user
    if user is None:
        raise credentials_exception

    if not user.is_active:
        await log_audit_event(
            db, user=user, request=request, action=AuditAction.ACCESS_DENIED,
            status_code=status.HTTP_403_FORBIDDEN, details="User account is inactive."
        )
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Inactive user")

    # Check if the user has the required scopes
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            await log_audit_event(
                db, user=user, request=request, action=AuditAction.ACCESS_DENIED,
                status_code=status.HTTP_403_FORBIDDEN, details=f"Insufficient scope. Required: {scope}"
            )
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Not enough permissions. Requires scope: {scope}",
                headers={"WWW-Authenticate": f"Bearer scope='{security_scopes.scope_str}'"},
            )

    return user

```

```python
# /api/v1/endpoints/patients.py
# Description: API endpoint for retrieving patient data.

from fastapi import APIRouter, Depends, HTTPException, status, Security, Request
from sqlalchemy.ext.asyncio import AsyncSession

import crud
from auth import get_current_user
from database import get_db
from models import User, UserRole, AuditAction
from schemas import PatientRecordSummary
from utils.audit_logger import log_audit_event

router = APIRouter()

@router.get(
    "/{patient_id}/summary",
    response_model=PatientRecordSummary,
    status_code=status.HTTP_200_OK,
    summary="Retrieve a Patient's Medical Record Summary",
    description="Fetches a minimal, HIPAA-compliant summary of a patient's record. Access is restricted to authorized clinical staff.",
    tags=["Patients"],
)
async def read_patient_summary(
    request: Request,
    patient_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Security(get_current_user, scopes=[UserRole.CLINICIAN.value, UserRole.NURSE.value]),
):
    """
    Endpoint to securely retrieve a patient record summary.

    - **Security**: Requires an authenticated user with 'clinician' or 'nurse' scope.
    - **Auditing**: All access attempts are logged for HIPAA compliance.
    - **Data Minimization**: Returns only a summary of the patient record via the
      `PatientRecordSummary` schema, adhering to the 'minimum necessary' principle.
    """
    patient = await crud.get_patient_by_id(db=db, patient_id=patient_id)

    if not patient:
        await log_audit_event(
            db,
            user=current_user,
            request=request,
            action=AuditAction.READ,
            status_code=status.HTTP_404_NOT_FOUND,
            resource_type="PatientRecordSummary",
            resource_id=patient_id,
            details="Patient not found",
        )
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Patient not found",
        )
    
    await log_audit_event(
        db,
        user=current_user,
        request=request,
        action=AuditAction.READ,
        status_code=status.HTTP_200_OK,
        resource_type="PatientRecordSummary",
        resource_id=patient.id,
        details=f"Successfully accessed patient summary for MRN: {patient.mrn}",
    )

    # Use the schema's custom from_orm method for secure data transformation
    return PatientRecordSummary.from_orm(patient)

```

```python
# /api/v1/api.py
# Description: Main API router for version 1.

from fastapi import APIRouter
from api.v1.endpoints import patients

api_router = APIRouter()
api_router.include_router(patients.router, prefix="/patients", tags=["Patients"])

```

```python
# /main.py
# Description: Main application entry point for the FastAPI EMR service.

from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from sqlalchemy.exc import SQLAlchemyError
from jose import JWTError

from api.v1.api import api_router
from config import settings

# Initialize FastAPI app
app = FastAPI(
    title="Secure EMR Backend Service",
    description="HIPAA-compliant backend for a modern Electronic Medical Record system.",
    version="1.0.0",
    redoc_url=None, # Disable ReDoc for production environments if desired
)

# --- Exception Handlers for Robust Error Logging and Responses ---

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    # Log validation errors for security monitoring
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": exc.errors(), "body": exc.body},
    )

@app.exception_handler(SQLAlchemyError)
async def sqlalchemy_exception_handler(request: Request, exc: SQLAlchemyError):
    # This is a generic handler. In production, you might have more specific ones.
    # Avoid leaking database error details to the client.
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "An internal database error occurred."},
    )

@app.exception_handler(JWTError)
async def jwt_exception_handler(request: Request, exc: JWTError):
    return JSONResponse(
        status_code=status.HTTP_401_UNAUTHORIZED,
        content={"detail": "Invalid or expired authentication token."},
        headers={"WWW-Authenticate": "Bearer"},
    )


# --- API Router Inclusion ---
app.include_router(api_router, prefix=settings.API_V1_STR)

# --- Root and Health Check Endpoints ---

@app.get("/", tags=["System"])
async def read_root():
    """
    Root endpoint for the service.
    """
    return {"status": "ok", "service": "Secure EMR Backend"}

@app.get("/health", status_code=status.HTTP_200_OK, tags=["System"])
async def health_check():
    """
    Health check endpoint for monitoring and load balancers.
    """
    return {"status": "healthy"}

```